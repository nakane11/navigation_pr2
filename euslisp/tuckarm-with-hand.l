(load "package://pr2eus/pr2-interface.l")
(defconstant *pr2-tuckarm-pose-larm-free-hand* (list #f(10.9964 63.8568 73.353 -113.496 5.90481 -92.0995 -23.1082)
                                                #f(-6.6127 60.5828 -122.994 -74.8254 56.2071 -5.72958 10.8427)))

(defun check-tuckarm-pose (&key (thre 20) &rest args)
  (send *pr2* :angle-vector (send *ri* :state :potentio-vector))
  (let ((l-angle (map float-vector #'(lambda(d)(- d (* 360 (round (/ d 360.0)))))
                      (send *pr2* :larm :angle-vector)))
        (r-angle (map float-vector #'(lambda(d)(- d (* 360 (round (/ d 360.0)))))
                      (send *pr2* :rarm :angle-vector)))
	(weight #f(5 2 1 0.5 0.1 0 0))
        is-rarm is-larm)
    (setq is-larm (and (< (norm (map float-vector #'* (v- l-angle (car *pr2-tuckarm-pose-larm-free-hand*)) weight)) thre)
                       (< (norm (map float-vector #'* (v- r-angle (cadr *pr2-tuckarm-pose-larm-free*)) weight)) thre)))
    (setq is-rarm (and (< (norm (map float-vector #'* (v- l-angle (car *pr2-tuckarm-pose-rarm-free*)) weight)) thre)
                       (< (norm (map float-vector #'* (v- r-angle (cadr *pr2-tuckarm-pose-rarm-free*)) weight)) thre)))
    (cond ((and (memq :rarm args) is-rarm) :rarm)
          ((and (memq :larm args) is-larm) :larm)
          (is-rarm :rarm)
          (is-larm :larm))
    ))

(defun pr2-tuckarm-pose (&optional free-arm (arm-side :both))
  (let* ((current-arm (check-tuckarm-pose :thre 40)) ;; nil rarm larm
         (free-arm (or free-arm current-arm :larm))
         (msec 500))
    (when (not (eq current-arm free-arm))
      (progn
        (setq msec 2000)
        (send *pr2* :larm :angle-vector #f( 25 0 0 -121 0 -6 0))
        (send *pr2* :rarm :angle-vector #f(-25 0 0 -121 0 -6 0))
        (send *ri* :angle-vector (send *pr2* :angle-vector) 2000)
        (send *ri* :wait-interpolation)
        ))
    ;; 右腕をたたむ
    (send *pr2* :rarm :angle-vector #f(-6.6127 60.5828 -122.994 -74.8254 56.2071 -5.72958 10.8427))
    (send *ri* :rarm-angle-vector (send *pr2* :angle-vector) 500))
  (send *ri* :wait-interpolation)
  (when (eq arm-side :both)
    ;; 左腕をたたむ
    (send *pr2* :larm :angle-vector #f(10.9964 63.8568 73.353 -113.496 5.90481 -92.0995 -23.1082))
    (send *ri* :larm-angle-vector (send *pr2* :angle-vector) 500)
    (send *ri* :wait-interpolation)
    t
    )
  )

